// netlify/functions/telegram-bot.js

const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID;
const TELEGRAM_API = `https://api.telegram.org/bot${TOKEN}`;

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

// –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
const STATES = {
  WAITING_PROBLEM: 'waiting_problem',
  WAITING_ADDRESS: 'waiting_address', 
  WAITING_DATETIME: 'waiting_datetime',
  WAITING_PHONE: 'waiting_phone'
};

exports.handler = async (event, context) => {
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      body: JSON.stringify({ error: 'Method not allowed' })
    };
  }

  try {
    const body = JSON.parse(event.body);
    const message = body.message;

    if (!message) {
      return { statusCode: 200, body: JSON.stringify({ ok: true }) };
    }

    const chatId = message.chat.id;
    const text = message.text;
    const userName = message.from.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    if (text === '/start') {
      userStates.set(chatId, { 
        state: STATES.WAITING_PROBLEM,
        data: {},
        userName: userName
      });
      
      await sendMessage(chatId, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –û–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–±–ª–µ–º—É üîß');
      return { statusCode: 200, body: JSON.stringify({ ok: true }) };
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if (text === '‚¨ÖÔ∏è –ù–∞–∑–∞–¥') {
      await handleBackButton(chatId);
      return { statusCode: 200, body: JSON.stringify({ ok: true }) };
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userState = userStates.get(chatId);
    
    if (!userState) {
      await sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üòä');
      return { statusCode: 200, body: JSON.stringify({ ok: true }) };
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    switch (userState.state) {
      case STATES.WAITING_PROBLEM:
        await handleProblemInput(chatId, text, userState);
        break;
        
      case STATES.WAITING_ADDRESS:
        await handleAddressInput(chatId, text, userState);
        break;
        
      case STATES.WAITING_DATETIME:
        await handleDateTimeInput(chatId, text, userState);
        break;
        
      case STATES.WAITING_PHONE:
        await handlePhoneInput(chatId, text, userState);
        break;
    }

    return { statusCode: 200, body: JSON.stringify({ ok: true }) };

  } catch (error) {
    console.error('Error:', error);
    return {
      statusCode: 500,
      body: JSON.stringify({ error: 'Internal server error' })
    };
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
async function handleProblemInput(chatId, text, userState) {
  if (text.length < 10) {
    await sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤) üìù');
    return;
  }

  userState.data.problem = text;
  userState.state = STATES.WAITING_ADDRESS;
  userStates.set(chatId, userState);

  await sendMessage(chatId, '–£–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∞–¥—Ä–µ—Å –≥–¥–µ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É üìç', true);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
async function handleAddressInput(chatId, text, userState) {
  if (text.length < 5) {
    await sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å üè†', true);
    return;
  }

  userState.data.address = text;
  userState.state = STATES.WAITING_DATETIME;
  userStates.set(chatId, userState);

  await sendMessage(chatId, '–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ, –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–∏–µ–∑–¥–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞\n\n–ü—Ä–∏–º–µ—Ä: 25.06.2025 14:30 ‚è∞', true);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
async function handleDateTimeInput(chatId, text, userState) {
  if (!isValidDateTime(text)) {
    await sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ ‚ùå\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n–ü—Ä–∏–º–µ—Ä: 25.06.2025 14:30', true);
    return;
  }

  userState.data.datetime = text;
  userState.state = STATES.WAITING_PHONE;
  userStates.set(chatId, userState);

  await sendMessage(chatId, '–£–∫–∞–∂–∏—Ç–µ –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏ üì±\n\n–ü—Ä–∏–º–µ—Ä: +7 123 456 78 90', true);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async function handlePhoneInput(chatId, text, userState) {
  if (!isValidPhone(text)) {
    await sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚ùå\n\n–ü—Ä–∏–º–µ—Ä: +7 123 456 78 90\n–∏–ª–∏: 8 123 456 78 90', true);
    return;
  }

  userState.data.phone = text;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  await sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å–≤—è–∂–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚úÖ');

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
  await sendRequestToAdmin(userState);

  // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  userStates.delete(chatId);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
async function handleBackButton(chatId) {
  const userState = userStates.get(chatId);
  
  if (!userState) {
    await sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üòä');
    return;
  }

  switch (userState.state) {
    case STATES.WAITING_PROBLEM:
      await sendMessage(chatId, '–í—ã –≤ –Ω–∞—á–∞–ª–µ. –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É üîß');
      break;
      
    case STATES.WAITING_ADDRESS:
      userState.state = STATES.WAITING_PROBLEM;
      userStates.set(chatId, userState);
      await sendMessage(chatId, '–û–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–±–ª–µ–º—É üîß');
      break;
      
    case STATES.WAITING_DATETIME:
      userState.state = STATES.WAITING_ADDRESS;
      userStates.set(chatId, userState);
      await sendMessage(chatId, '–£–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∞–¥—Ä–µ—Å –≥–¥–µ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É üìç', true);
      break;
      
    case STATES.WAITING_PHONE:
      userState.state = STATES.WAITING_DATETIME;
      userStates.set(chatId, userState);
      await sendMessage(chatId, '–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ, –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–∏–µ–∑–¥–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞\n\n–ü—Ä–∏–º–µ—Ä: 25.06.2025 14:30 ‚è∞', true);
      break;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async function sendRequestToAdmin(userState) {
  const message = `üîß –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê\n\n` +
    `üë§ –û—Ç: ${userState.userName}\n\n` +
    `üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:\n${userState.data.problem}\n\n` +
    `üìç –ê–¥—Ä–µ—Å:\n${userState.data.address}\n\n` +
    `‚è∞ –í—Ä–µ–º—è:\n${userState.data.datetime}\n\n` +
    `üì± –¢–µ–ª–µ—Ñ–æ–Ω:\n${userState.data.phone}`;

  await sendMessage(ADMIN_CHAT_ID, message);
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage(chatId, text, showBackButton = false) {
  const url = `${TELEGRAM_API}/sendMessage`;
  
  let keyboard = null;
  if (showBackButton) {
    keyboard = {
      keyboard: [['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']],
      resize_keyboard: true,
      one_time_keyboard: false
    };
  } else {
    keyboard = { remove_keyboard: true };
  }

  const response = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      chat_id: chatId,
      text: text,
      reply_markup: keyboard
    })
  });

  return response.json();
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
function isValidDateTime(dateTimeStr) {
  const regex = /^(\d{2})\.(\d{2})\.(\d{4})\s+(\d{1,2}):(\d{2})$/;
  const match = dateTimeStr.match(regex);
  
  if (!match) return false;
  
  const [, day, month, year, hour, minute] = match;
  const date = new Date(year, month - 1, day, hour, minute);
  
  return date.getDate() == day && 
         date.getMonth() == month - 1 && 
         date.getFullYear() == year &&
         hour >= 0 && hour <= 23 &&
         minute >= 0 && minute <= 59;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
function isValidPhone(phone) {
  const cleaned = phone.replace(/[\s\-\(\)]/g, '');
  const regex = /^(\+7|8|7)[\d]{10}$/;
  return regex.test(cleaned);
}
